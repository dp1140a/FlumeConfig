{
    "name": "spoolingDirectorySource",
    "id": "",
    "printName": "Spooling Directory",
    "description": "<p>This source lets you ingest data by placing files to be ingested into a “spooling” directory on disk. This source will watch the specified directory for new files, and will parse events out of new files as they appear. The event parsing logic is pluggable. After a given file has been fully read into the channel, it is renamed to indicate completion (or optionally deleted).</p><p>Unlike the Exec source, this source is reliable and will not miss data, even if Flume is restarted or killed. In exchange for this reliability, only immutable, uniquely-named files must be dropped into the spooling directory. Flume tries to detect these problem conditions and will fail loudly if they are violated:<ol><li/>If a file is written to after being placed into the spooling directory, Flume will print an error to its log file and stop processing.<li/>If a file name is reused at a later time, Flume will print an error to its log file and stop processing.</ol><p>To avoid the above issues, it may be useful to add a unique identifier (such as a timestamp) to log file names when they are moved into the spooling directory.</p><p>Despite the reliability guarantees of this source, there are still cases in which events may be duplicated if certain downstream failures occur. This is consistent with the guarantees offered by other Flume components.</p>",
    "type": "spoolidir",
    "category": "sources",
    "configProperties": {
        "spoolDir": {
            "name": "spoolDir",
            "printName": "Spool Dir",
            "value": "",
            "valueType": "String",
            "required": true,
            "description": "The directory from which to read files from."
        },
        "fileSuffix": {
            "name": "fileSuffix",
            "printName": "File Suffix",
            "value": ".COMPLETED",
            "valueType": "String",
            "required": false,
            "description": "Suffix to append to completely ingested files"
        },
        "deletePolicy": {
            "name": "deletePolicy",
            "printName": "Delete Policy",
            "value": "never",
            "valueType": "String",
            "required": false,
            "description": "When to delete completed files: never or immediate"
        },
        "fileHeader": {
            "name": "fileHeader",
            "printName": "File Header",
            "value": false,
            "valueType": "Boolean",
            "required": false,
            "description": "Whether to add a header storing the absolute path filename."
        },
        "fileHeaderKey": {
            "name": "fileHeaderKey",
            "printName": "File Header Key",
            "value": "file",
            "valueType": "String",
            "required": false,
            "description": "Header key to use when appending absolute path filename to event header."
        },
        "basenameHeader": {
            "name": "basenameHeader",
            "printName": "Basename Header",
            "value": true,
            "valueType": "Boolean",
            "required": false,
            "description": "Whether to add a header storing the basename of the file."
        },
        "basenameHeaderKey": {
            "name": "basenameHeaderKey",
            "printName": "Basename Header Key",
            "value": "basename",
            "valueType": "String",
            "required": false,
            "description": "Header Key to use when appending basename of file to event header."
        },
        "ignorePattern": {
            "name": "ignorePattern",
            "printName": "Ignore Pattern",
            "value": "^$",
            "valueType": "String",
            "required": false,
            "description": "Regular expression specifying which files to ignore (skip)"
        },
        "trackerDir": {
            "name": "trackerDir",
            "printName": "Tracker Dir",
            "value": ".flumespool",
            "valueType": "String",
            "required": false,
            "description": "Directory to store metadata related to processing of files. If this path is not an absolute path, then it is interpreted as relative to the spoolDir."
        },
        "consumeOrder": {
            "name": "consumeOrder",
            "printName": "Consume Order",
            "value": "oldest",
            "valueType": "String",
            "required": false,
            "description": "In which order files in the spooling directory will be consumed oldest, youngest and random. In case of oldest and youngest, the last modified time of the files will be used to compare the files. In case of a tie, the file with smallest laxicographical order will be consumed first. In case of random any file will be picked randomly. When using oldest and youngest the whole directory will be scanned to pick the oldest/youngest file, which might be slow if there are a large number of files, while using random may cause old files to be consumed very late if new files keep coming in the spooling directory."
        },
        "maxBackOff": {
            "name": "maxBackOff",
            "printName": "Max Back Off",
            "value": 4000,
            "valueType": "Number",
            "required": false,
            "description": "The maximum time (in millis) to wait between consecutive attempts to write to the channel(s) if the channel is full. The source will start at a low backoff and increase it exponentially each time the channel throws a ChannelException, upto the value specified by this parameter."
        },
        "batchSize": {
            "name": "batchSize",
            "printName": "Batch Size",
            "value": 100,
            "valueType": "Number",
            "required": false,
            "description": "Granularity at which to batch transfer to the channel"
        },
        "inputCharset": {
            "name": "inputCharset",
            "printName": "Input Charset",
            "value": "UTF-8",
            "valueType": "String",
            "required": false,
            "description": "Character set used by deserializers that treat the input file as text."
        },
        "decodeErrorPolicy": {
            "name": "decodeErrorPolicy",
            "printName": "Decode Error Policy",
            "value": "FAIL",
            "valueType": "String",
            "required": false,
            "description": "What to do when we see a non-decodable character in the input file. FAIL: Throw an exception and fail to parse the file. REPLACE: Replace the unparseable character with the 'replacement character' char, typically Unicode U+FFFD. IGNORE: Drop the unparseable character sequence."
        },
        "deserializer": {
            "name": "deserializer",
            "printName": "Deserializer",
            "value": "LINE",
            "valueType": "String",
            "required": false,
            "description": "Specify the deserializer used to parse the file into events. Defaults to parsing each line as an event. The class specified must implement EventDeserializer.Builder."
        },
        "bufferMaxLineLength": {
            "name": "bufferMaxLineLength",
            "printName": "Buffer Max Line Length",
            "value": 5000,
            "valueType": "Number",
            "required": false,
            "description": "(Deprecated) Maximum length of a line in the commit buffer. Use deserializer.maxLineLength instead."
        },
        "selectorType": {
            "name": "selector.type",
            "printName": "Selector Type",
            "value": "replicating",
            "valueType": "String",
            "required": false,
            "description": "replicating or multiplexing"
        }
    }
}